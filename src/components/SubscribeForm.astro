---
type Props = {
  direction: string;
};

const { direction } = Astro.props;
---

<form class="subscribe-form" name="subscribe">
  <ul class="form">
    <li>
      <input
        type="text"
        name="first-name"
        placeholder="First Name"
        class="form-input first-name-input"
        required
      />
    </li>
    <li>
      <input
        type="email"
        name="email"
        placeholder="Email Address"
        class="form-input email-input"
        required
      />
    </li>

    <li><button type="submit" class="btn subscribe-btn">Subscribe</button></li>
  </ul>
</form>
<span class="error-msg"></span>
<div class="thank-you-div no-display">
  <span class="thank-you-msg"></span>
</div>

<script>
  import axios from 'axios';
  const firstNameInput = document.querySelector(
    '.first-name-input'
  ) as HTMLInputElement;
  const emailInput = document.querySelector('.email-input') as HTMLInputElement;
  const subscribeForm = document.querySelector('.subscribe-form');
  const errorMsg = document.querySelector('.error-msg');
  const thankYouDiv = document.querySelector('.thank-you-div');
  const thankYouMsg = document.querySelector('.thank-you-msg');

  async function handleSignUp(e: FormDataEvent) {
    e.preventDefault();

    try {
      const res = await axios.post(
        import.meta.env.MODE === 'development'
          ? 'https://localhost:8888/api/signup'
          : `https://ejandtn-strapi-backend-production.up.railway.app/api/sign-up`,
        {
          email: emailInput.value,
          firstName: firstNameInput.value,
        }
      );

      if (res.data.error) {
        errorMsg.textContent = res.data.error;
        return;
      }

      subscribeForm.classList.add('no-display');
      thankYouMsg.textContent = res.data.message;
      thankYouDiv.classList.remove('no-display');
    } catch (err) {
      console.log('Error');
    }
  }

  subscribeForm.addEventListener('submit', handleSignUp);
</script>

<style lang="scss" define:vars={{ direction }}>
  .subscribe-form {
    width: 100%;
  }

  .form {
    width: 100%;
    list-style: none;
    margin-bottom: 1.2rem;

    display: flex;
    flex-direction: var(--direction);
    align-items: center;
    justify-content: center;
    gap: 1.2rem;

    & li {
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    @media (max-width: 41em) {
      display: grid;
      row-gap: 1rem;
      grid-template-columns: 1fr 1fr;
      justify-items: center;

      & li:nth-child(3) {
        grid-column: 1/3;
        grid-row: 2/3;
      }

      & li:last-child {
        grid-column: 1/3;
        grid-row: 3/4;
      }
    }

    @media (max-width: 29em) {
      display: flex;
      flex-direction: column;
      row-gap: 2.8rem;
    }
  }

  .form-input {
    padding: 1.4rem;
    font-family: inherit;
    font-size: 1.6rem;
    font-weight: 600;
    width: 100%;
    border: none;
  }

  .form-input::placeholder {
    color: rgba(9, 13, 22, 0.377);
  }

  .subscribe-btn {
    width: 100%;
    padding: 1rem 4.8rem !important;
    border: 0.2rem solid var(--light-color) !important;

    transition: all 0.3s;
  }

  .subscribe-btn:hover {
    padding: 1rem 4.8rem;
    color: var(--dark-color);
    background-color: var(--light-color);
    border: 0.2rem solid var(--light-color);
  }

  .error-msg {
    color: red;
  }

  .no-display {
    display: none;
  }
</style>
